[33mcommit 85671c7f2f28806dbd3c1dc740513e1cce462642[m[33m ([m[1;36mHEAD -> [m[1;32mmaster[m[33m)[m
Author: Aimeana100 <aimeanathole@gmail.com>
Date:   Tue Jun 21 16:07:23 2022 +0200

    first commit

[1mdiff --git a/.editorconfig b/.editorconfig[m
[1mnew file mode 100644[m
[1mindex 0000000..1671c9b[m
[1m--- /dev/null[m
[1m+++ b/.editorconfig[m
[36m@@ -0,0 +1,18 @@[m
[32m+[m[32mroot = true[m
[32m+[m
[32m+[m[32m[*][m
[32m+[m[32mcharset = utf-8[m
[32m+[m[32mend_of_line = lf[m
[32m+[m[32minsert_final_newline = true[m
[32m+[m[32mindent_style = space[m
[32m+[m[32mindent_size = 4[m
[32m+[m[32mtrim_trailing_whitespace = true[m
[32m+[m
[32m+[m[32m[*.md][m
[32m+[m[32mtrim_trailing_whitespace = false[m
[32m+[m
[32m+[m[32m[*.{yml,yaml}][m
[32m+[m[32mindent_size = 2[m
[32m+[m
[32m+[m[32m[docker-compose.yml][m
[32m+[m[32mindent_size = 4[m
[1mdiff --git a/.env.example b/.env.example[m
[1mnew file mode 100644[m
[1mindex 0000000..2c0ab78[m
[1m--- /dev/null[m
[1m+++ b/.env.example[m
[36m@@ -0,0 +1,52 @@[m
[32m+[m[32mAPP_NAME=Laravel[m
[32m+[m[32mAPP_ENV=local[m
[32m+[m[32mAPP_KEY=[m
[32m+[m[32mAPP_DEBUG=true[m
[32m+[m[32mAPP_URL=http://localhost[m
[32m+[m
[32m+[m[32mLOG_CHANNEL=stack[m
[32m+[m[32mLOG_DEPRECATIONS_CHANNEL=null[m
[32m+[m[32mLOG_LEVEL=debug[m
[32m+[m
[32m+[m[32mDB_CONNECTION=mysql[m
[32m+[m[32mDB_HOST=127.0.0.1[m
[32m+[m[32mDB_PORT=3306[m
[32m+[m[32mDB_DATABASE=e_vistors[m
[32m+[m[32mDB_USERNAME=root[m
[32m+[m[32mDB_PASSWORD=[m
[32m+[m
[32m+[m[32mBROADCAST_DRIVER=log[m
[32m+[m[32mCACHE_DRIVER=file[m
[32m+[m[32mFILESYSTEM_DRIVER=local[m
[32m+[m[32mQUEUE_CONNECTION=sync[m
[32m+[m[32mSESSION_DRIVER=file[m
[32m+[m[32mSESSION_LIFETIME=120[m
[32m+[m
[32m+[m[32mMEMCACHED_HOST=127.0.0.1[m
[32m+[m
[32m+[m[32mREDIS_HOST=127.0.0.1[m
[32m+[m[32mREDIS_PASSWORD=null[m
[32m+[m[32mREDIS_PORT=6379[m
[32m+[m
[32m+[m[32mMAIL_MAILER=smtp[m
[32m+[m[32mMAIL_HOST=mailhog[m
[32m+[m[32mMAIL_PORT=1025[m
[32m+[m[32mMAIL_USERNAME=null[m
[32m+[m[32mMAIL_PASSWORD=null[m
[32m+[m[32mMAIL_ENCRYPTION=null[m
[32m+[m[32mMAIL_FROM_ADDRESS=null[m
[32m+[m[32mMAIL_FROM_NAME="${APP_NAME}"[m
[32m+[m
[32m+[m[32mAWS_ACCESS_KEY_ID=[m
[32m+[m[32mAWS_SECRET_ACCESS_KEY=[m
[32m+[m[32mAWS_DEFAULT_REGION=us-east-1[m
[32m+[m[32mAWS_BUCKET=[m
[32m+[m[32mAWS_USE_PATH_STYLE_ENDPOINT=false[m
[32m+[m
[32m+[m[32mPUSHER_APP_ID=[m
[32m+[m[32mPUSHER_APP_KEY=[m
[32m+[m[32mPUSHER_APP_SECRET=[m
[32m+[m[32mPUSHER_APP_CLUSTER=mt1[m
[32m+[m
[32m+[m[32mMIX_PUSHER_APP_KEY="${PUSHER_APP_KEY}"[m
[32m+[m[32mMIX_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"[m
[1mdiff --git a/.gitattributes b/.gitattributes[m
[1mnew file mode 100644[m
[1mindex 0000000..510d996[m
[1m--- /dev/null[m
[1m+++ b/.gitattributes[m
[36m@@ -0,0 +1,10 @@[m
[32m+[m[32m* text=auto[m
[32m+[m
[32m+[m[32m*.blade.php diff=html[m
[32m+[m[32m*.css diff=css[m
[32m+[m[32m*.html diff=html[m
[32m+[m[32m*.md diff=markdown[m
[32m+[m[32m*.php diff=php[m
[32m+[m
[32m+[m[32m/.github export-ignore[m
[32m+[m[32mCHANGELOG.md export-ignore[m
[1mdiff --git a/.gitignore b/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..eb003b0[m
[1m--- /dev/null[m
[1m+++ b/.gitignore[m
[36m@@ -0,0 +1,15 @@[m
[32m+[m[32m/node_modules[m
[32m+[m[32m/public/hot[m
[32m+[m[32m/public/storage[m
[32m+[m[32m/storage/*.key[m
[32m+[m[32m/vendor[m
[32m+[m[32m.env[m
[32m+[m[32m.env.backup[m
[32m+[m[32m.phpunit.result.cache[m
[32m+[m[32mdocker-compose.override.yml[m
[32m+[m[32mHomestead.json[m
[32m+[m[32mHomestead.yaml[m
[32m+[m[32mnpm-debug.log[m
[32m+[m[32myarn-error.log[m
[32m+[m[32m/.idea[m
[32m+[m[32m/.vscode[m
[1mdiff --git a/.styleci.yml b/.styleci.yml[m
[1mnew file mode 100644[m
[1mindex 0000000..877ea70[m
[1m--- /dev/null[m
[1m+++ b/.styleci.yml[m
[36m@@ -0,0 +1,14 @@[m
[32m+[m[32mphp:[m
[32m+[m[32m  preset: laravel[m
[32m+[m[32m  version: 8[m
[32m+[m[32m  disabled:[m
[32m+[m[32m    - no_unused_imports[m
[32m+[m[32m  finder:[m
[32m+[m[32m    not-name:[m
[32m+[m[32m      - index.php[m
[32m+[m[32m      - server.php[m
[32m+[m[32mjs:[m
[32m+[m[32m  finder:[m
[32m+[m[32m    not-name:[m
[32m+[m[32m      - webpack.mix.js[m
[32m+[m[32mcss: true[m
[1mdiff --git a/README.md b/README.md[m
[1mnew file mode 100644[m
[1mindex 0000000..1b6397c[m
[1m--- /dev/null[m
[1m+++ b/README.md[m
[36m@@ -0,0 +1,64 @@[m
[32m+[m[32m<p align="center"><a href="https://laravel.com" target="_blank"><img src="https://raw.githubusercontent.com/laravel/art/master/logo-lockup/5%20SVG/2%20CMYK/1%20Full%20Color/laravel-logolockup-cmyk-red.svg" width="400"></a></p>[m
[32m+[m
[32m+[m[32m<p align="center">[m
[32m+[m[32m<a href="https://travis-ci.org/laravel/framework"><img src="https://travis-ci.org/laravel/framework.svg" alt="Build Status"></a>[m
[32m+[m[32m<a href="https://packagist.org/packages/laravel/framework"><img src="https://img.shields.io/packagist/dt/laravel/framework" alt="Total Downloads"></a>[m
[32m+[m[32m<a href="https://packagist.org/packages/laravel/framework"><img src="https://img.shields.io/packagist/v/laravel/framework" alt="Latest Stable Version"></a>[m
[32m+[m[32m<a href="https://packagist.org/packages/laravel/framework"><img src="https://img.shields.io/packagist/l/laravel/framework" alt="License"></a>[m
[32m+[m[32m</p>[m
[32m+[m
[32m+[m[32m## About Laravel[m
[32m+[m
[32m+[m[32mLaravel is a web application framework with expressive, elegant syntax. We believe development must be an enjoyable and creative experience to be truly fulfilling. Laravel takes the pain out of development by easing common tasks used in many web projects, such as:[m
[32m+[m
[32m+[m[32m- [Simple, fast routing engine](https://laravel.com/docs/routing).[m
[32m+[m[32m- [Powerful dependency injection container](https://laravel.com/docs/container).[m
[32m+[m[32m- Multiple back-ends for [session](https://laravel.com/docs/session) and [cache](https://laravel.com/docs/cache) storage.[m
[32m+[m[32m- Expressive, intuitive [database ORM](https://laravel.com/docs/eloquent).[m
[32m+[m[32m- Database agnostic [schema migrations](https://laravel.com/docs/migrations).[m
[32m+[m[32m- [Robust background job processing](https://laravel.com/docs/queues).[m
[32m+[m[32m- [Real-time event broadcasting](https://laravel.com/docs/broadcasting).[m
[32m+[m
[32m+[m[32mLaravel is accessible, powerful, and provides tools required for large, robust applications.[m
[32m+[m
[32m+[m[32m## Learning Laravel[m
[32m+[m
[32m+[m[32mLaravel has the most extensive and thorough [documentation](https://laravel.com/docs) and video tutorial library of all modern web application frameworks, making it a breeze to get started with the framework.[m
[32m+[m
[32m+[m[32mIf you don't feel like reading, [Laracasts](https://laracasts.com) can help. Laracasts contains over 1500 video tutorials on a range of topics including Laravel, modern PHP, unit testing, and JavaScript. Boost your skills by digging into our comprehensive video library.[m
[32m+[m
[32m+[m[32m## Laravel Sponsors[m
[32m+[m
[32m+[m[32mWe would like to extend our thanks to the following sponsors for funding Laravel development. If you are interested in becoming a sponsor, please visit the Laravel [Patreon page](https://patreon.com/taylorotwell).[m
[32m+[m
[32m+[m[32m### Premium Partners[m
[32m+[m
[32m+[m[32m- **[Vehikl](https://vehikl.com/)**[m
[32m+[m[32m- **[Tighten Co.](https://tighten.co)**[m
[32m+[m[32m- **[Kirschbaum Development Group](https://kirschbaumdevelopment.com)**[m
[32m+[m[32m- **[64 Robots](https://64robots.com)**[m
[32m+[m[32m- **[Cubet Techno Labs](https://cubettech.com)**[m
[32m+[m[32m- **[Cyber-Duck](https://cyber-duck.co.uk)**[m
[32m+[m[32m- **[Many](https://www.many.co.uk)**[m
[32m+[m[32m- **[Webdock, Fast VPS Hosting](https://www.webdock.io/en)**[m
[32m+[m[32m- **[DevSquad](https://devsquad.com)**[m
[32m+[m[32m- **[Curotec](https://www.curotec.com/services/technologies/laravel/)**[m
[32m+[m[32m- **[OP.GG](https://op.gg)**[m
[32m+[m[32m- **[WebReinvent](https://webreinvent.com/?utm_source=laravel&utm_medium=github&utm_campaign=patreon-sponsors)**[m
[32m+[m[32m- **[Lendio](https://lendio.com)**[m
[32m+[m
[32m+[m[32m## Contributing[m
[32m+[m
[32m+[m[32mThank you for considering contributing to the Laravel framework! The contribution guide can be found in the [Laravel documentation](https://laravel.com/docs/contributions).[m
[32m+[m
[32m+[m[32m## Code of Conduct[m
[32m+[m
[32m+[m[32mIn order to ensure that the Laravel community is welcoming to all, please review and abide by the [Code of Conduct](https://laravel.com/docs/contributions#code-of-conduct).[m
[32m+[m
[32m+[m[32m## Security Vulnerabilities[m
[32m+[m
[32m+[m[32mIf you discover a security vulnerability within Laravel, please send an e-mail to Taylor Otwell via [taylor@laravel.com](mailto:taylor@laravel.com). All security vulnerabilities will be promptly addressed.[m
[32m+[m
[32m+[m[32m## License[m
[32m+[m
[32m+[m[32mThe Laravel framework is open-sourced software licensed under the [MIT license](https://opensource.org/licenses/MIT).[m
[1mdiff --git a/app/Console/Kernel.php b/app/Console/Kernel.php[m
[1mnew file mode 100644[m
[1mindex 0000000..d8bc1d2[m
[1m--- /dev/null[m
[1m+++ b/app/Console/Kernel.php[m
[36m@@ -0,0 +1,32 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Console;[m
[32m+[m
[32m+[m[32muse Illuminate\Console\Scheduling\Schedule;[m
[32m+[m[32muse Illuminate\Foundation\Console\Kernel as ConsoleKernel;[m
[32m+[m
[32m+[m[32mclass Kernel extends ConsoleKernel[m
[32m+[m[32m{[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Define the application's command schedule.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @param  \Illuminate\Console\Scheduling\Schedule  $schedule[m
[32m+[m[32m     * @return void[m
[32m+[m[32m     */[m
[32m+[m[32m    protected function schedule(Schedule $schedule)[m
[32m+[m[32m    {[m
[32m+[m[32m        // $schedule->command('inspire')->hourly();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Register the commands for the application.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @return void[m
[32m+[m[32m     */[m
[32m+[m[32m    protected function commands()[m
[32m+[m[32m    {[m
[32m+[m[32m        $this->load(__DIR__.'/Commands');[m
[32m+[m
[32m+[m[32m        require base_path('routes/console.php');[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/app/Exceptions/Handler.php b/app/Exceptions/Handler.php[m
[1mnew file mode 100644[m
[1mindex 0000000..8e7fbd1[m
[1m--- /dev/null[m
[1m+++ b/app/Exceptions/Handler.php[m
[36m@@ -0,0 +1,41 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Exceptions;[m
[32m+[m
[32m+[m[32muse Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;[m
[32m+[m[32muse Throwable;[m
[32m+[m
[32m+[m[32mclass Handler extends ExceptionHandler[m
[32m+[m[32m{[m
[32m+[m[32m    /**[m
[32m+[m[32m     * A list of the exception types that are not reported.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @var array<int, class-string<Throwable>>[m
[32m+[m[32m     */[m
[32m+[m[32m    protected $dontReport = [[m
[32m+[m[32m        //[m
[32m+[m[32m    ];[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * A list of the inputs that are never flashed for validation exceptions.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @var array<int, string>[m
[32m+[m[32m     */[m
[32m+[m[32m    protected $dontFlash = [[m
[32m+[m[32m        'current_password',[m
[32m+[m[32m        'password',[m
[32m+[m[32m        'password_confirmation',[m
[32m+[m[32m    ];[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Register the exception handling callbacks for the application.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @return void[m
[32m+[m[32m     */[m
[32m+[m[32m    public function register()[m
[32m+[m[32m    {[m
[32m+[m[32m        $this->reportable(function (Throwable $e) {[m
[32m+[m[32m            //[m
[32m+[m[32m        });[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Controllers/API/AuthController.php b/app/Http/Controllers/API/AuthController.php[m
[1mnew file mode 100644[m
[1mindex 0000000..37044a1[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Controllers/API/AuthController.php[m
[36m@@ -0,0 +1,199 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Controllers\API;[m
[32m+[m
[32m+[m[32muse Carbon\Carbon;[m
[32m+[m[32muse App\Models\User;[m
[32m+[m[32muse App\Models\Admin\Vistor;[m
[32m+[m[32muse Illuminate\Http\Request;[m
[32m+[m[32muse App\Models\Admin\CardTap;[m
[32m+[m[32muse App\Models\Admin\Employee;[m
[32m+[m[32muse Illuminate\Validation\Rules;[m
[32m+[m[32muse App\Http\Controllers\Controller;[m
[32m+[m[32muse Illuminate\Support\Facades\Auth;[m
[32m+[m[32muse Illuminate\Support\Facades\Hash;[m
[32m+[m
[32m+[m[32muse function PHPUnit\Framework\isEmpty;[m
[32m+[m[32muse PHPUnit\Framework\Constraint\IsEmpty;[m
[32m+[m
[32m+[m[32mclass AuthController extends Controller[m
[32m+[m[32m{[m
[32m+[m[32m    public function auth(Request $request)[m
[32m+[m[32m    {[m
[32m+[m[32m        $credentials =  ['email' => $request->username, 'password' => $request->password];[m
[32m+[m
[32m+[m[32m        Auth::attempt($credentials);[m
[32m+[m[32m        if (Auth::check()) {[m
[32m+[m[32m            return response()->json(["data" => ["user" => Auth::user(), 'result' => "sussess"]], 200);[m
[32m+[m[32m        } elseif (!User::where('email', '=', $request->username)->exist()) {[m
[32m+[m[32m            return response()->json(["data" => ["user" => null, 'result' => "error", "message" => "Username doesn't matches"]], 200);[m
[32m+[m[32m        } elseif (User::where('email', '=', $request->username)->exist()) {[m
[32m+[m[32m            return response()->json(["data" => ["user" => null, 'result' => "error", "message" => "Password doesn't matches"]], 200);[m
[32m+[m[32m        } else {[m
[32m+[m[32m            return response()->json(["data" => ["user" => null, 'result' => "error", "message" => "Unknown Error"]], 200);[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m    public function register(Request $request)[m
[32m+[m[32m    {[m
[32m+[m[32m        $request->validate([[m
[32m+[m[32m            'name' => 'required|string|max:255',[m
[32m+[m[32m            'email' => 'required|string|email|max:255|unique:users',[m
[32m+[m[32m            'password' => ['required', Rules\Password::min(8)[m
[32m+[m[32m            ->letters()[m
[32m+[m[32m            ->mixedCase()[m
[32m+[m[32m            ->numbers()[m
[32m+[m[32m            ->symbols()],[m
[32m+[m[32m            // 'NID' => 'required|string|max:16',[m
[32m+[m[32m        ]);[m
[32m+[m
[32m+[m[32m        $user = User::create([[m
[32m+[m[32m            'name' => $request->name,[m
[32m+[m[32m            'email' => $request->email,[m
[32m+[m[32m            'NID' => $request->NID,[m
[32m+[m[32m            'password' => Hash::make($request->password),[m
[32m+[m[32m        ]);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m    public function tap(Request $request)[m
[32m+[m[32m    {[m
[32m+[m[32m        date_default_timezone_set('Africa/kigali');[m
[32m+[m
[32m+[m[32m        $employee = new Employee();[m
[32m+[m[32m        $tap = new CardTap();[m
[32m+[m[32m        $visitor = new Vistor();[m
[32m+[m
[32m+[m[32m        $currentTime = Carbon::createFromFormat('Y-m-d H:i:s', date('Y-m-d H:i:s'));[m
[32m+[m
[32m+[m
[32m+[m[32m        // return response()->json(["data" => $request->key]);[m
[32m+[m
[32m+[m[32m        if ($request->key === "staff") {[m
[32m+[m
[32m+[m[32m            $staff = Employee::where(['ID_Card' => $request->idnumber])->get();[m
[32m+[m
[32m+[m[32m            if (count($staff) < 1) {[m
[32m+[m
[32m+[m[32m                $employee->names = $request->fullname;[m
[32m+[m[32m                $employee->gender = $request->gender;[m
[32m+[m[32m                $employee->phone = $request->phonenumber;[m
[32m+[m[32m                $employee->ID_Card = $request->idnumber;[m
[32m+[m[32m                $employee->company = $request->residance;[m
[32m+[m[32m                $employee->status = "IN";[m
[32m+[m[32m                $employee->dateJoined = $currentTime;[m
[32m+[m[32m                $employee->latestTap = $currentTime;[m
[32m+[m[32m                try {[m
[32m+[m[32m                    $employee->save();[m
[32m+[m[32m                    $tap->user_id = $employee->id;[m
[32m+[m[32m                    $tap->tapped_at = $employee->dateJoined;[m
[32m+[m[32m                    $tap->ID_Card = $employee->ID_Card;[m
[32m+[m[32m                    $tap->card_type = "STAFF";[m
[32m+[m[32m                    $tap->status = "ENTERING";[m
[32m+[m[32m                    $tap->save();[m
[32m+[m[32m                } catch (\Throwable $th) {[m
[32m+[m[32m                    return response()->json(["error" => $th->errorInfo], 500);[m
[32m+[m[32m                }[m
[32m+[m
[32m+[m[32m                return response()->json(["data" => ["user" => $employee, "previousTap" => null, "status" => "ENTERING"]]);[m
[32m+[m[32m            } else {[m
[32m+[m
[32m+[m[32m                $tap->user_id = $staff[0]['id'];[m
[32m+[m[32m                $tap->ID_Card = $staff[0]['ID_Card'];[m
[32m+[m[32m                $tap->tapped_at = $currentTime;[m
[32m+[m[32m                $tap->card_type = "STAFF";[m
[32m+[m[32m                $tap->status =  $staff[0]['status'] == "IN" ? "EXITING" : "ENTERING";[m
[32m+[m[32m                Employee::where('ID_Card', $staff[0]['ID_Card'])->update(['status' => $staff[0]['status'] == "IN" ? "OUT" : "IN"]);[m
[32m+[m[32m                Employee::where('ID_Card', $staff[0]['ID_Card'])->update(['latestTap' => $currentTime]);[m
[32m+[m[41m               [m
[32m+[m[32m                // $staff[0]->status = $staff[0]->status == "OUT" ? "IN" : "OUT";[m
[32m+[m[32m                try {[m
[32m+[m[32m                    $tap->save();[m
[32m+[m[32m                } catch (\Throwable $th) {[m
[32m+[m[32m                    return response()->json(["error" => $th->errorInfo], 500);[m
[32m+[m[32m                }[m
[32m+[m[32m                return response()->json(["data" => ["user" => Employee::where('ID_Card', $staff[0]['ID_Card'])->get()[0], "previousTap" => null, "status" => $tap->status]]);[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m
[32m+[m[32m        //     \\[m[41m [m
[32m+[m[32m        // Vistor \\[m
[32m+[m
[32m+[m[32m        if ($request->key === "visitor") {[m
[32m+[m
[32m+[m[32m            $visitor_staff = Vistor::where(['ID_Card' => $request->idnumber])->get();[m
[32m+[m[41m            [m
[32m+[m
[32m+[m[32m            // if (!in_array($request->reason, ["OWNS", "LOST", "UNDER"])) {[m
[32m+[m[32m            //     return response()->json(["data" => $request->all(), "status" => "error", "message" => "Reason Error"], 201);[m
[32m+[m[32m            // }[m
[32m+[m
[32m+[m[32m            if (count($visitor_staff) < 1) {[m
[32m+[m
[32m+[m[32m                $visitor->names = $request->fullname;[m
[32m+[m[32m                $visitor->gender = $request->gender;[m
[32m+[m[32m                $visitor->phone = $request->phonenumber;[m
[32m+[m[32m                $visitor->ID_Card = $request->idnumber;[m
[32m+[m[32m                $visitor->destination = $request->destination;[m
[32m+[m[32m                $visitor->reason = "OWNS";[m
[32m+[m[32m                $visitor->status = "IN";[m
[32m+[m[32m                $visitor->dateJoined = $currentTime;[m
[32m+[m[32m                $visitor->latestTap = $currentTime;[m
[32m+[m[32m                // return response()->json(["data" => $visitor->save()]);[m
[32m+[m
[32m+[m[32m                try {[m
[32m+[m[32m                    $visitor->save();[m
[32m+[m[32m                    $tap->user_id = $visitor->id;[m
[32m+[m[32m                    $tap->ID_Card = $visitor->ID_Card;[m
[32m+[m[32m                    $tap->tapped_at = $visitor->dateJoined;[m
[32m+[m[32m                    $tap->card_type = "VISTOR";[m
[32m+[m[32m                    $tap->status = "ENTERING";[m
[32m+[m
[32m+[m[32m                    $tap->save();[m
[32m+[m[32m                } catch (\Throwable $th) {[m
[32m+[m[32m                    return response()->json(["error" => $th->errorInfo], 500);[m
[32m+[m[32m                }[m
[32m+[m
[32m+[m[32m                return response()->json(["data" => ["user" => "VISITOR", "previousTap" => null, "status" => "ENTERING"]], 200);[m
[32m+[m[32m            } else {[m
[32m+[m[32m                $tap->user_id = $visitor_staff[0]['id'];[m
[32m+[m[32m                $tap->ID_Card = $visitor_staff[0]['ID_Card'];[m
[32m+[m[32m                $tap->tapped_at = $currentTime;[m
[32m+[m[32m                $tap->card_type = "STAFF";[m
[32m+[m[32m                $tap->status =  $visitor_staff[0]['status'] == "IN" ? "EXITING" : "ENTERING";[m
[32m+[m[32m                Vistor::where('ID_Card', $visitor_staff[0]['ID_Card'])->update(['status' => $visitor_staff[0]['status'] == "IN" ? "OUT" : "IN"]);[m
[32m+[m[32m                Vistor::where('ID_Card', $visitor_staff[0]['ID_Card'])->update(['latestTap' => $currentTime ]);[m
[32m+[m
[32m+[m[32m                try {[m
[32m+[m[32m                    $tap->save();[m
[32m+[m[32m                } catch (\Throwable $th) {[m
[32m+[m[32m                    return response()->json(["error" => $th->errorInfo], 500);[m
[32m+[m[32m                }[m
[32m+[m[32m                return response()->json(["data" => ["user" => "VISITOR", "previousTap" => null, "status" => $tap->status]]);[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            return response()->json(["data" => $request->all('key')]);[m
[32m+[m[32m        } elseif ($request->key === "noid") {[m
[32m+[m
[32m+[m[32m            return response()->json(["data" => $request->all('key')]);[m
[32m+[m[32m        } else {[m
[32m+[m
[32m+[m[32m            return response()->json(["data" => ['result' => "no id"]]);[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public function allTaps()[m
[32m+[m[32m    {[m
[32m+[m[32m        return response()->json(["data" => CardTap::all()]);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public function allEmployees()[m
[32m+[m[32m    {[m
[32m+[m[32m        return response()->json(["data" => Employee::all()]);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public function allVisitors()[m
[32m+[m[32m    {[m
[32m+[m[32m        return response()->json(["data" => Vistor::all()]);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Controllers/API/GateKeeperController.php b/app/Http/Controllers/API/GateKeeperController.php[m
[1mnew file mode 100644[m
[1mindex 0000000..9ce429a[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Controllers/API/GateKeeperController.php[m
[36m@@ -0,0 +1,91 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Controllers\API;[m
[32m+[m
[32m+[m[32muse Carbon\Carbon;[m
[32m+[m[32muse Webpatser\Uuid\Uuid;[m
[32m+[m[32muse App\Models\GateKeeper;[m
[32m+[m[32muse Illuminate\Http\Request;[m
[32m+[m[32muse App\Models\GateKeeperLog;[m
[32m+[m[32muse App\Http\Controllers\Controller;[m
[32m+[m[32muse Illuminate\Support\Facades\Auth;[m
[32m+[m[32muse Illuminate\Support\Facades\Hash;[m
[32m+[m
[32m+[m[32mclass GateKeeperController extends Controller[m
[32m+[m[32m{[m
[32m+[m[32m    public function register(Request $request)[m
[32m+[m[32m    {[m
[32m+[m
[32m+[m[32m        if ($request->isMethod('post')) {[m
[32m+[m[32m            $email = $request->input('email');[m
[32m+[m[32m            $password = $request->input('password');[m
[32m+[m[41m    [m
[32m+[m[32m            $gateNames = $request->input('GatekeeperNames');[m
[32m+[m[32m            $gatePassword = $request->input('gatekeeperpassword');[m
[32m+[m[32m            $gateUsername = $request->input('gatekeeperUsername');[m
[32m+[m[41m    [m
[32m+[m[32m            $credentials =  ['email' => $email, 'password' => $password];[m
[32m+[m[41m    [m
[32m+[m[32m            // Auth::attempt($credentials);[m
[32m+[m[41m    [m
[32m+[m[32m            if ( Auth::attempt($credentials))[m
[32m+[m[32m                {[m
[32m+[m[32m                    // if()[m
[32m+[m[32m                    $gateKeeper = new GateKeeper();[m
[32m+[m[32m                    $gateKeeper->names = $gateNames;[m
[32m+[m[32m                    $gateKeeper->username = $gateUsername;[m
[32m+[m[32m                    $gateKeeper->password = Hash::make($gatePassword);[m
[32m+[m[32m                    $gateKeeper->session_status = true;[m
[32m+[m[32m                    $gateKeeper->status = true;[m
[32m+[m[41m    [m
[32m+[m[32m                    try {[m
[32m+[m[32m                        $gateKeeper->save();[m
[32m+[m[32m                    } catch (\Throwable $th) {[m
[32m+[m[32m                        return response()->json(["error" => $th->errorInfo], 500);[m
[32m+[m[32m                    }[m
[32m+[m[41m    [m
[32m+[m[32m                    return response()->json(['result'=>"ok", 'user'=> $gateKeeper],200);[m
[32m+[m[32m                }[m
[32m+[m[32m                else[m
[32m+[m[32m                {[m
[32m+[m[32m                    return response()->json(['result'=>'incorrect', 'message'=>'You need to be a trusted user to register a device user'], 200);[m
[32m+[m[32m                }[m
[32m+[m[32m        }[m
[32m+[m[32m        else[m
[32m+[m[32m        {[m
[32m+[m[32m            return response()->json(["result"=> "incorrect", "message"=>"Bad method call" ],200);[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public function login(Request $request)[m
[32m+[m[32m    {[m
[32m+[m[32m        date_default_timezone_set('Africa/kigali');[m
[32m+[m
[32m+[m[32m        $user = GateKeeper::where(['username'=> $request->gateUsername])->first();[m
[32m+[m[32m        if($user){[m
[32m+[m[32m            if(Hash::check($request->gatePassword,$user['password'])){[m
[32m+[m
[32m+[m[32m                $gateKeeperLogs = new GateKeeperLog();[m
[32m+[m
[32m+[m[32m                $gateKeeperLogs->session = (string) Uuid::generate();[m
[32m+[m[32m                $gateKeeperLogs->logDate = Carbon::createFromFormat('Y-m-d H:i:s', date('Y-m-d H:i:s'));[m
[32m+[m[32m                $gateKeeperLogs->gate_keeper_id = $user->id;[m
[32m+[m[32m                $gateKeeperLogs->loginDevice = "123";[m
[32m+[m[32m                $gateKeeperLogs->save();[m
[32m+[m
[32m+[m[41m                [m
[32m+[m[32m                return response()->json(['result'=>'ok', 'message'=> "success"],200);[m
[32m+[m[32m            }[m
[32m+[m[32m            else[m
[32m+[m[32m            {[m
[32m+[m[32m                return response()->json(['result'=>'incorrect', 'message'=> "password doesnt matsh"],200);[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m        return response()->json(['result'=>'incorrect', 'message'=> 'User does not exist'], 200);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public function all(){[m
[32m+[m[32m        $allGateKeeper = GateKeeper::all();[m
[32m+[m[32m        return response()->json(['data' => $allGateKeeper]);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Controllers/API/InfoMergingController.php b/app/Http/Controllers/API/InfoMergingController.php[m
[1mnew file mode 100644[m
[1mindex 0000000..6be410d[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Controllers/API/InfoMergingController.php[m
[36m@@ -0,0 +1,181 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Controllers\API;[m
[32m+[m
[32m+[m[32muse Carbon\Carbon;[m
[32m+[m[32muse App\Models\Admin\Vistor;[m
[32m+[m[32muse Illuminate\Http\Request;[m
[32m+[m[32muse App\Models\Admin\CardTap;[m
[32m+[m[32muse App\Models\Admin\Employee;[m
[32m+[m[32muse App\Http\Controllers\Controller;[m
[32m+[m
[32m+[m[32mclass InfoMergingController extends Controller[m
[32m+[m[32m{[m
[32m+[m
[32m+[m
[32m+[m[32m    public function tap(Request $request)[m
[32m+[m[32m    {[m
[32m+[m[32m        // date_default_timezone_set('Africa/kigali');[m
[32m+[m
[32m+[m[32m        $employee = new Employee();[m
[32m+[m[32m        $tap = new CardTap();[m
[32m+[m[32m        $visitor = new Vistor();[m
[32m+[m
[32m+[m[32m        $currentTime = Carbon::createFromFormat('Y-m-d H:i:s', date('Y-m-d H:i:s'));[m
[32m+[m
[32m+[m[32m        $tap_date = $request->tappedAt;[m
[32m+[m
[32m+[m
[32m+[m[32m        // return response()->json(["data" => $request->key]);[m
[32m+[m
[32m+[m[32m        if ($request->key === "staff") {[m
[32m+[m
[32m+[m[32m            $staff = Employee::where(['ID_Card' => $request->idnumber])->get();[m
[32m+[m[32m            return "exit";[m
[32m+[m[32m            if (count($staff) < 1) {[m
[32m+[m
[32m+[m[32m                $employee->names = $request->fullname;[m
[32m+[m[32m                $employee->gender = $request->gender;[m
[32m+[m[32m                $employee->phone = $request->phonenumber;[m
[32m+[m[32m                $employee->ID_Card = $request->idnumber;[m
[32m+[m[32m                $employee->company = $request->residance;[m
[32m+[m[32m                $employee->status = "IN";[m
[32m+[m[32m                $employee->dateJoined = $currentTime;[m
[32m+[m[32m                $employee->latestTap = $tap_date;[m
[32m+[m[32m                try {[m
[32m+[m[32m                    $employee->save();[m
[32m+[m[32m                    $tap->user_id = $employee->id;[m
[32m+[m[32m                    $tap->tapped_at = $request->tappedAt;[m
[32m+[m[32m                    $tap->ID_Card = $employee->ID_Card;[m
[32m+[m[32m                    $tap->card_type = "STAFF";[m
[32m+[m[32m                    $tap->status = "ENTERING";[m
[32m+[m[32m                    $tap->save();[m
[32m+[m[32m                } catch (\Throwable $th) {[m
[32m+[m[32m                    return response()->json(["error" => $th->errorInfo], 500);[m
[32m+[m[32m                }[m
[32m+[m
[32m+[m[32m                return response()->json(["data" => ["user" => $employee, "previousTap" => null, "status" => "ENTERING"]]);[m
[32m+[m[32m            } else {[m
[32m+[m
[32m+[m[32m                $tap->user_id = $staff[0]['id'];[m
[32m+[m[32m                $tap->ID_Card = $staff[0]['ID_Card'];[m
[32m+[m[32m                $tap->tapped_at = $request->tappedAt;[m
[32m+[m[32m                $tap->card_type = "STAFF";[m
[32m+[m[32m                $tap->status =  $staff[0]['status'] == "IN" ? "EXITING" : "ENTERING";[m
[32m+[m[32m                Employee::where('ID_Card', $staff[0]['ID_Card'])->update(['status' => $staff[0]['status'] == "IN" ? "OUT" : "IN"]);[m
[32m+[m[32m                Employee::where('ID_Card', $staff[0]['ID_Card'])->update(['latestTap' => $tap_date]);[m
[32m+[m
[32m+[m[32m                // $staff[0]->status = $staff[0]->status == "OUT" ? "IN" : "OUT";[m
[32m+[m[32m                // try {[m
[32m+[m[32m                //     $tap->save();[m
[32m+[m[32m                // } catch (\Throwable $th) {[m
[32m+[m[32m                //     return response()->json(["error" => $th->errorInfo], 500);[m
[32m+[m[32m                // }[m
[32m+[m[32m                return response()->json(["data" => ["user" => Employee::where('ID_Card', $staff[0]['ID_Card'])->get()[0], "previousTap" => null, "status" => $tap->status]]);[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m
[32m+[m[32m        //     \\[m[41m [m
[32m+[m[32m        // Vistor\\[m
[32m+[m[32m        //\\[m
[32m+[m[32m        //  \\[m
[32m+[m
[32m+[m[32m        if ($request->key === "visitor") {[m
[32m+[m
[32m+[m[32m            $currentTime = Carbon::createFromFormat('Y-m-d H:i:s', date('Y-m-d H:i:s'));[m
[32m+[m[32m            $affectedRows = 0;[m
[32m+[m[32m            $existingRecords = [];[m
[32m+[m
[32m+[m
[32m+[m[32m            for ($i = 0; $i < count($request->all())-1; $i++) {[m
[32m+[m[32m                // return response()->json(["cardTaps"=> count(CardTap::all()), "visitor"=> count(Vistor::all()) ]);[m
[32m+[m
[32m+[m[32m                $tap_date = $request[$i]['tappedAt'];[m
[32m+[m
[32m+[m[32m                $tap = new CardTap();[m
[32m+[m[32m                $visitor = new Vistor();[m
[32m+[m
[32m+[m[32m                $visitor_staff = Vistor::where(['ID_Card' => $request[$i]['idnumber']])->first();[m
[32m+[m
[32m+[m
[32m+[m[32m                // if (!in_array($request->reason, ["OWNS", "LOST", "UNDER"])) {[m
[32m+[m[32m                //     return response()->json(["data" => $request->all(), "status" => "error", "message" => "Reason Error"], 201);[m
[32m+[m[32m                // }[m
[32m+[m
[32m+[m[32m                if (!$visitor_staff) {[m
[32m+[m
[32m+[m[32m                    $visitor->names = $request[$i]['fullname'];[m
[32m+[m[32m                    $visitor->gender = $request[$i]['gender'];[m
[32m+[m[32m                    $visitor->phone = $request[$i]['phonenumber'];[m
[32m+[m[32m                    $visitor->ID_Card = $request[$i]['idnumber'];[m
[32m+[m[32m                    $visitor->destination = $request[$i]['destination'];[m
[32m+[m[32m                    $visitor->reason = "OWNS";[m
[32m+[m[32m                    $visitor->status = "IN";[m
[32m+[m[32m                    $visitor->dateJoined = $tap_date;[m
[32m+[m[32m                    $visitor->latestTap = $tap_date;[m
[32m+[m
[32m+[m[32m                    // return response()->json(["data" => $visitor->save()]);[m
[32m+[m
[32m+[m[32m                    try {[m
[32m+[m
[32m+[m[32m                        $visitor->save();[m
[32m+[m[32m                        $tap->user_id = $visitor->id;[m
[32m+[m[32m                        $tap->ID_Card = $visitor->ID_Card;[m
[32m+[m[32m                        $tap->tapped_at = $request[$i]['tappedAt'];[m
[32m+[m[32m                        $tap->card_type = "VISTOR";[m
[32m+[m[32m                        $tap->status = "ENTERING";[m
[32m+[m
[32m+[m[32m                        if($tap->save())[m
[32m+[m[32m                        {$affectedRows++;}[m
[32m+[m[41m                        [m
[32m+[m[32m                    } catch (\Throwable $th) {[m
[32m+[m[32m                        return response()->json(["error" => $th->errorInfo], 500);[m
[32m+[m[32m                    }[m
[32m+[m
[32m+[m[32m                    // return response()->json(["data" => ["user" => "VISITOR", "previousTap" => null, "status" => "ENTERING"]], 200);[m
[32m+[m[32m                }[m[41m [m
[32m+[m[32m                else {[m
[32m+[m
[32m+[m[32m                    $existing_record = Vistor::where(['ID_Card' => $request[$i]['idnumber']])->get();[m
[32m+[m
[32m+[m[32m                    if ($visitor_staff->latestTap == $request[$i]['tappedAt']) {[m
[32m+[m
[32m+[m[32m                        // return response()->json(["data" => "skipped"]);[m
[32m+[m[32m                        $affectedRows++;[m
[32m+[m[32m                        array_push($existingRecords, $existing_record);[m
[32m+[m
[32m+[m[32m                        continue;[m
[32m+[m[32m                    } else {[m
[32m+[m
[32m+[m[32m                        $tap->user_id = $visitor_staff['id'];[m
[32m+[m[32m                        $tap->ID_Card = $visitor_staff['ID_Card'];[m
[32m+[m[32m                        $tap->tapped_at = $request[$i]['tappedAt'];[m
[32m+[m[32m                        $tap->card_type = "VISITOR";[m
[32m+[m[32m                        $tap->status =  $visitor_staff['status'] == "IN" ? "EXITING" : "ENTERING";[m
[32m+[m[32m                        Vistor::where('ID_Card', $visitor_staff['ID_Card'])->update(['status' => $visitor_staff['status'] == "IN" ? "OUT" : "IN"]);[m
[32m+[m[32m                        Vistor::where('ID_Card', $visitor_staff['ID_Card'])->update(['latestTap' => $tap_date]);[m
[32m+[m
[32m+[m[32m                        try {[m
[32m+[m[32m                        if($tap->save())[m
[32m+[m[32m                        {$affectedRows++;}[m
[32m+[m[32m                        } catch (\Throwable $th) {[m
[32m+[m[32m                            return response()->json(["error" => $th->errorInfo], 500);[m
[32m+[m[32m                        }[m
[32m+[m[32m                        // return response()->json(["data" => ["user" => "VISITOR", "status" => "Updated"]]);[m
[32m+[m[32m                    }[m
[32m+[m[32m                }[m
[32m+[m
[32m+[m[32m                // return response()->json(["data" => $request->all('key')]);[m
[32m+[m
[32m+[m[32m            }[m
[32m+[m[32m            return response()->json(["data" => $affectedRows, "repeated"=> $existingRecords]);[m
[32m+[m[32m        } elseif ($request->key === "noid") {[m
[32m+[m
[32m+[m[32m            return response()->json(["data" => $request->all('key')]);[m
[32m+[m[32m        } else {[m
[32m+[m
[32m+[m[32m            return response()->json(["data" => ['result' => "no id"]]);[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Controllers/API/UserController.php b/app/Http/Controllers/API/UserController.php[m
[1mnew file mode 100644[m
[1mindex 0000000..88e33ee[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Controllers/API/UserController.php[m
[36m@@ -0,0 +1,14 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Controllers\API;[m
[32m+[m
[32m+[m[32muse App\Http\Controllers\Controller;[m
[32m+[m[32muse App\Models\User;[m
[32m+[m[32muse Illuminate\Http\Request;[m
[32m+[m
[32m+[m[32mclass UserController extends Controller[m
[32m+[m[32m{[m
[32m+[m[32m    public function user(){[m
[32m+[m[32m        return User::all();[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Controllers/Admin/AdminController.php b/app/Http/Controllers/Admin/AdminController.php[m
[1mnew file mode 100644[m
[1mindex 0000000..b3a58c4[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Controllers/Admin/AdminController.php[m
[36m@@ -0,0 +1,55 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Controllers\Admin;[m
[32m+[m
[32m+[m[32muse App\Models\User;[m
[32m+[m[32muse Inertia\Inertia;[m
[32m+[m[32muse Illuminate\Http\Request;[m
[32m+[m[32muse App\Http\Controllers\Controller;[m
[32m+[m[32muse App\Models\Admin\CardTap;[m
[32m+[m[32muse App\Models\Admin\Company;[m
[32m+[m[32muse App\Models\Admin\Employee;[m
[32m+[m[32muse App\Models\Admin\Vistor;[m
[32m+[m[32muse Carbon\Carbon;[m
[32m+[m[32muse Illuminate\Support\Facades\DB;[m
[32m+[m
[32m+[m[32mclass AdminController extends Controller[m
[32m+[m[32m{[m
[32m+[m[32m    public function dashboard()[m
[32m+[m[32m    {[m
[32m+[m
[32m+[m[32m        $last_30days = Carbon::now()->subDays(30);[m
[32m+[m
[32m+[m[32m        $vistors = Vistor::all();[m
[32m+[m[32m        $employees = Employee::all();[m
[32m+[m[32m        $users = User::all();[m
[32m+[m[32m        $companies = Company::all();[m
[32m+[m[32m        $companiesActive = Company::where(['state'=> true])->count();[m
[32m+[m
[32m+[m[32m        $last_30['vistors'] = DB::table('card_taps')->distinct('ID_Card')->where(['card_type'=>"VISTOR"])->where('tapped_at', '>=', $last_30days)->count();[m
[32m+[m[32m        $inInstitution['vistors'] = Vistor::where(['status'=> "IN"])->count();[m
[32m+[m[32m        $inInstitution['employee'] = Employee::where(['state'=> "IN"])->count();[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m        return Inertia::render('Dashboard', ['vistors' => $vistors, 'employees' => $employees, 'users' => $users, 'companies' => $companies, 'last_30days'=>$last_30, 'inInstitution' => $inInstitution, 'companiesActive' => $companiesActive]);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public function vistors()[m
[32m+[m[32m    {[m
[32m+[m[32m        return Inertia::render('Vistors');[m
[32m+[m[32m    }[m
[32m+[m[32m    public function employees()[m
[32m+[m[32m    {[m
[32m+[m[32m        return Inertia::render('Employees');[m
[32m+[m[32m    }[m
[32m+[m[32m    public function companies()[m
[32m+[m[32m    {[m
[32m+[m[32m        return Inertia::render('Companies');[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public function equipments()[m
[32m+[m[32m    {[m
[32m+[m[32m        return Inertia::render('Equipments');[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Controllers/Admin/CompanyController.php b/app/Http/Controllers/Admin/CompanyController.php[m
[1mnew file mode 100644[m
[1mindex 0000000..71c9eac[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Controllers/Admin/CompanyController.php[m
[36m@@ -0,0 +1,45 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Controllers\Admin;[m
[32m+[m
[32m+[m[32muse Inertia\Inertia;[m
[32m+[m[32muse Illuminate\Http\Request;[m
[32m+[m[32muse App\Models\Admin\Company;[m
[32m+[m[32muse App\Http\Controllers\Controller;[m
[32m+[m[32muse Illuminate\Support\Facades\Session;[m
[32m+[m[32muse Illuminate\Support\Facades\Redirect;[m
[32m+[m[32muse App\Http\Resources\CompanyCollection;[m
[32m+[m
[32m+[m[32mclass CompanyController extends Controller[m
[32m+[m[32m{[m
[32m+[m[32m    public function companies()[m
[32m+[m[32m    {[m
[32m+[m[32m        $companies = new CompanyCollection(Company::all());[m
[32m+[m[32m        return Inertia::render('Companies/Index', ['companies' => $companies]);[m
[32m+[m[32m    }[m
[32m+[m[32m    public function store(Request $request)[m
[32m+[m[32m    {[m
[32m+[m[32m        $request->validate(['Cname' => 'required|unique:companies,company_name,except,id']);[m
[32m+[m
[32m+[m[32m        $company = new Company();[m
[32m+[m[32m        $company->company_name = $request->Cname;[m
[32m+[m[32m        $company->state = true;[m
[32m+[m
[32m+[m[32m        try {[m
[32m+[m[32m            $company->save();[m
[32m+[m[32m        } catch (\Throwable $th) {[m
[32m+[m[32m            return response()->json(['error' => $th->errorInfo]);[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        return redirect()->back()->with('success', 'Company added successfully');[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public function companyBurn(Company $company)[m
[32m+[m[32m    {[m
[32m+[m[32m        $message = $company->state ? "Burned to Pass the gate in" : "Granted to Pass the gate in";[m
[32m+[m[32m        $company->update(['state' => !$company->state]);[m
[32m+[m[32m        Session::flash('alert-class', 'alert-danger');[m[41m [m
[32m+[m[32m        return back()->with('success', 'All '. $company->company_name . '\'s Employee ' . $message);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m[41m [m
\ No newline at end of file[m
[1mdiff --git a/app/Http/Controllers/Admin/EmployeeController.php b/app/Http/Controllers/Admin/EmployeeController.php[m
[1mnew file mode 100644[m
[1mindex 0000000..7d75dc6[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Controllers/Admin/EmployeeController.php[m
[36m@@ -0,0 +1,35 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Controllers\Admin;[m
[32m+[m
[32m+[m[32muse Inertia\Inertia;[m
[32m+[m[32muse Illuminate\Http\Request;[m
[32m+[m[32muse App\Models\Admin\Employee;[m
[32m+[m[32muse App\Http\Controllers\Controller;[m
[32m+[m[32muse App\Http\Resources\EmployeeCollection;[m
[32m+[m[32muse Illuminate\Support\Facades\Redirect;[m
[32m+[m
[32m+[m[32mclass EmployeeController extends Controller[m
[32m+[m[32m{[m
[32m+[m[32m    public function employees(Request $request)[m
[32m+[m[32m    {[m
[32m+[m[32m        $filters = $request->all('search', 'selected');[m
[32m+[m[32m        $employees = new EmployeeCollection([m
[32m+[m[32m            Employee::filter([m
[32m+[m[32m                $request->all('search', 'selected')[m
[32m+[m[32m            )[m
[32m+[m[32m                ->paginate()[m
[32m+[m[32m                ->appends($request->all())[m
[32m+[m[32m        );[m
[32m+[m
[32m+[m[32m        return Inertia::render('Employees/Index', ['employees' => $employees, 'filters' => $filters]);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public function employeeBurn(Employee $employee)[m
[32m+[m[32m    {[m
[32m+[m[32m        $message = $employee->state ? "Burned to Pass the gate in" : "Granted to Pass the gate in";[m
[32m+[m[32m        $employee->update(['state' => !$employee->state]);[m
[32m+[m
[32m+[m[32m        return Redirect::back()->with('success', 'Employee State has ' . $message);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Controllers/Admin/EquipmentController.php b/app/Http/Controllers/Admin/EquipmentController.php[m
[1mnew file mode 100644[m
[1mindex 0000000..4459c60[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Controllers/Admin/EquipmentController.php[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Controllers\Admin;[m
[32m+[m
[32m+[m[32muse App\Http\Controllers\Controller;[m
[32m+[m[32muse Illuminate\Http\Request;[m
[32m+[m
[32m+[m[32mclass EquipmentController extends Controller[m
[32m+[m[32m{[m
[32m+[m[32m    //[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Controllers/Admin/UserController.php b/app/Http/Controllers/Admin/UserController.php[m
[1mnew file mode 100644[m
[1mindex 0000000..7c09b61[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Controllers/Admin/UserController.php[m
[36m@@ -0,0 +1,23 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Controllers\Admin;[m
[32m+[m
[32m+[m[32muse App\Models\User;[m
[32m+[m[32muse Inertia\Inertia;[m
[32m+[m[32muse Illuminate\Http\Request;[m
[32m+[m[32muse App\Http\Controllers\Controller;[m
[32m+[m
[32m+[m[32mclass UserController extends Controller[m
[32m+[m[32m{[m
[32m+[m[32m    public function users()[m
[32m+[m[32m    {[m
[32m+[m[32m        $users = User::all();[m
[32m+[m[32m        return Inertia::render('Users/Index', ['users' => $users]);[m
[32m+[m[32m    }[m
[32m+[m[32m    public function create(Request $request){[m
[32m+[m[32m        return Inertia::render('Users/Create');[m
[32m+[m[32m    }[m
[32m+[m[32m    public function edit(User $user){[m
[32m+[m[41m   [m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Controllers/Admin/VistorController.php b/app/Http/Controllers/Admin/VistorController.php[m
[1mnew file mode 100644[m
[1mindex 0000000..1806051[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Controllers/Admin/VistorController.php[m
[36m@@ -0,0 +1,46 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Controllers\Admin;[m
[32m+[m
[32m+[m[32muse Carbon\Carbon;[m
[32m+[m[32muse Inertia\Inertia;[m
[32m+[m[32muse App\Models\Admin\Vistor;[m
[32m+[m[32muse Illuminate\Http\Request;[m
[32m+[m[32muse App\Models\Admin\CardTap;[m
[32m+[m[32muse App\Models\Admin\Employee;[m
[32m+[m[32muse Illuminate\Support\Facades\DB;[m
[32m+[m[32muse App\Http\Controllers\Controller;[m
[32m+[m[32muse App\Http\Resources\CardTapCollection;[m
[32m+[m[32muse App\Http\Resources\VisitorCollection;[m
[32m+[m
[32m+[m[32mclass VistorController extends Controller[m
[32m+[m[32m{[m
[32m+[m[32m    public function vistors(Request $request)[m
[32m+[m[32m    {[m
[32m+[m[32m        //  dd(CardTap::where('tapped_at', '>=' , '2022-5-24')->get('tapped_at'));[m
[32m+[m
[32m+[m[32m        $filters = $request->all('searchFrom', 'searchTo', 'selected');[m
[32m+[m[32m        $vistors = new VisitorCollection([m
[32m+[m[32m            Vistor::filter([m
[32m+[m[32m                $request->all('searchFrom', 'searchTo', 'selected')[m
[32m+[m[32m            )[m
[32m+[m
[32m+[m[32m                ->paginate(1000)[m
[32m+[m[32m                ->appends($request->all())[m
[32m+[m[32m        );[m
[32m+[m
[32m+[m[32m        // $vistors = $vistors->values()->all();[m
[32m+[m
[32m+[m[32m        //  dd (DB::table('vistors')->join(DB::raw('(SELECT * FROM card_taps ORDER BY id DESC LIMIT 1) latestTap'), function($join){[m
[32m+[m[32m        //      $join->on('vistors.id', '=', 'latestTap.user_id');[m
[32m+[m[32m        // } )->get());[m
[32m+[m
[32m+[m[32m        // $taps = new CardTapCollection(CardTap::all()); dd($taps);[m
[32m+[m
[32m+[m[32m        $taps = json_encode(['taps' => CardTap::paginate()]);[m
[32m+[m[32m        // dd(CardTap::all());[m
[32m+[m[32m        // dd($vistors);[m
[32m+[m
[32m+[m[32m        return Inertia::render('Vistors/Index', ['vistors' => $vistors, 'filters' => $filters, 'taps' => $taps]);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Controllers/Auth/AuthenticatedSessionController.php b/app/Http/Controllers/Auth/AuthenticatedSessionController.php[m
[1mnew file mode 100644[m
[1mindex 0000000..ab68c92[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Controllers/Auth/AuthenticatedSessionController.php[m
[36m@@ -0,0 +1,59 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Controllers\Auth;[m
[32m+[m
[32m+[m[32muse App\Http\Controllers\Controller;[m
[32m+[m[32muse App\Http\Requests\Auth\LoginRequest;[m
[32m+[m[32muse App\Providers\RouteServiceProvider;[m
[32m+[m[32muse Illuminate\Http\Request;[m
[32m+[m[32muse Illuminate\Support\Facades\Auth;[m
[32m+[m[32muse Illuminate\Support\Facades\Route;[m
[32m+[m[32muse Inertia\Inertia;[m
[32m+[m
[32m+[m[32mclass AuthenticatedSessionController extends Controller[m
[32m+[m[32m{[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Display the login view.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @return \Inertia\Response[m
[32m+[m[32m     */[m
[32m+[m[32m    public function create()[m
[32m+[m[32m    {[m
[32m+[m[32m        return Inertia::render('Auth/Login', [[m
[32m+[m[32m            'canResetPassword' => Route::has('password.request'),[m
[32m+[m[32m            'status' => session('status'),[m
[32m+[m[32m        ]);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Handle an incoming authentication request.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @param  \App\Http\Requests\Auth\LoginRequest  $request[m
[32m+[m[32m     * @return \Illuminate\Http\RedirectResponse[m
[32m+[m[32m     */[m
[32m+[m[32m    public function store(LoginRequest $request)[m
[32m+[m[32m    {[m
[32m+[m[32m        $request->authenticate();[m
[32m+[m
[32m+[m[32m        $request->session()->regenerate();[m
[32m+[m
[32m+[m[32m        return redirect()->intended(RouteServiceProvider::HOME);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Destroy an authenticated session.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @param  \Illuminate\Http\Request  $request[m
[32m+[m[32m     * @return \Illuminate\Http\RedirectResponse[m
[32m+[m[32m     */[m
[32m+[m[32m    public function destroy(Request $request)[m
[32m+[m[32m    {[m
[32m+[m[32m        Auth::guard('web')->logout();[m
[32m+[m
[32m+[m[32m        $request->session()->invalidate();[m
[32m+[m
[32m+[m[32m        $request->session()->regenerateToken();[m
[32m+[m
[32m+[m[32m        return redirect('/');[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Controllers/Auth/ConfirmablePasswordController.php b/app/Http/Controllers/Auth/ConfirmablePasswordController.php[m
[1mnew file mode 100644[m
[1mindex 0000000..305376e[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Controllers/Auth/ConfirmablePasswordController.php[m
[36m@@ -0,0 +1,45 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Controllers\Auth;[m
[32m+[m
[32m+[m[32muse App\Http\Controllers\Controller;[m
[32m+[m[32muse App\Providers\RouteServiceProvider;[m
[32m+[m[32muse Illuminate\Http\Request;[m
[32m+[m[32muse Illuminate\Support\Facades\Auth;[m
[32m+[m[32muse Illuminate\Validation\ValidationException;[m
[32m+[m[32muse Inertia\Inertia;[m
[32m+[m
[32m+[m[32mclass ConfirmablePasswordController extends Controller[m
[32m+[m[32m{[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Show the confirm password view.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @return \Inertia\Response[m
[32m+[m[32m     */[m
[32m+[m[32m    public function show()[m
[32m+[m[32m    {[m
[32m+[m[32m        return Inertia::render('Auth/ConfirmPassword');[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Confirm the user's password.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @param  \Illuminate\Http\Request  $request[m
[32m+[m[32m     * @return mixed[m
[32m+[m[32m     */[m
[32m+[m[32m    public function store(Request $request)[m
[32m+[m[32m    {[m
[32m+[m[32m        if (! Auth::guard('web')->validate([[m
[32m+[m[32m            'email' => $request->user()->email,[m
[32m+[m[32m            'password' => $request->password,[m
[32m+[m[32m        ])) {[m
[32m+[m[32m            throw ValidationException::withMessages([[m
[32m+[m[32m                'password' => __('auth.password'),[m
[32m+[m[32m            ]);[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        $request->session()->put('auth.password_confirmed_at', time());[m
[32m+[m
[32m+[m[32m        return redirect()->intended(RouteServiceProvider::HOME);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Controllers/Auth/EmailVerificationNotificationController.php b/app/Http/Controllers/Auth/EmailVerificationNotificationController.php[m
[1mnew file mode 100644[m
[1mindex 0000000..3362dca[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Controllers/Auth/EmailVerificationNotificationController.php[m
[36m@@ -0,0 +1,27 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Controllers\Auth;[m
[32m+[m
[32m+[m[32muse App\Http\Controllers\Controller;[m
[32m+[m[32muse App\Providers\RouteServiceProvider;[m
[32m+[m[32muse Illuminate\Http\Request;[m
[32m+[m
[32m+[m[32mclass EmailVerificationNotificationController extends Controller[m
[32m+[m[32m{[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Send a new email verification notification.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @param  \Illuminate\Http\Request  $request[m
[32m+[m[32m     * @return \Illuminate\Http\RedirectResponse[m
[32m+[m[32m     */[m
[32m+[m[32m    public function store(Request $request)[m
[32m+[m[32m    {[m
[32m+[m[32m        if ($request->user()->hasVerifiedEmail()) {[m
[32m+[m[32m            return redirect()->intended(RouteServiceProvider::HOME);[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        $request->user()->sendEmailVerificationNotification();[m
[32m+[m
[32m+[m[32m        return back()->with('status', 'verification-link-sent');[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Controllers/Auth/EmailVerificationPromptController.php b/app/Http/Controllers/Auth/EmailVerificationPromptController.php[m
[1mnew file mode 100644[m
[1mindex 0000000..85a9835[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Controllers/Auth/EmailVerificationPromptController.php[m
[36m@@ -0,0 +1,24 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Controllers\Auth;[m
[32m+[m
[32m+[m[32muse App\Http\Controllers\Controller;[m
[32m+[m[32muse App\Providers\RouteServiceProvider;[m
[32m+[m[32muse Illuminate\Http\Request;[m
[32m+[m[32muse Inertia\Inertia;[m
[32m+[m
[32m+[m[32mclass EmailVerificationPromptController extends Controller[m
[32m+[m[32m{[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Display the email verification prompt.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @param  \Illuminate\Http\Request  $request[m
[32m+[m[32m     * @return mixed[m
[32m+[m[32m     */[m
[32m+[m[32m    public function __invoke(Request $request)[m
[32m+[m[32m    {[m
[32m+[m[32m        return $request->user()->hasVerifiedEmail()[m
[32m+[m[32m                    ? redirect()->intended(RouteServiceProvider::HOME)[m
[32m+[m[32m                    : Inertia::render('Auth/VerifyEmail', ['status' => session('status')]);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Controllers/Auth/NewPasswordController.php b/app/Http/Controllers/Auth/NewPasswordController.php[m
[1mnew file mode 100644[m
[1mindex 0000000..e38b05c[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Controllers/Auth/NewPasswordController.php[m
[36m@@ -0,0 +1,73 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Controllers\Auth;[m
[32m+[m
[32m+[m[32muse App\Http\Controllers\Controller;[m
[32m+[m[32muse Illuminate\Auth\Events\PasswordReset;[m
[32m+[m[32muse Illuminate\Http\Request;[m
[32m+[m[32muse Illuminate\Support\Facades\Hash;[m
[32m+[m[32muse Illuminate\Support\Facades\Password;[m
[32m+[m[32muse Illuminate\Support\Str;[m
[32m+[m[32muse Illuminate\Validation\Rules;[m
[32m+[m[32muse Illuminate\Validation\ValidationException;[m
[32m+[m[32muse Inertia\Inertia;[m
[32m+[m
[32m+[m[32mclass NewPasswordController extends Controller[m
[32m+[m[32m{[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Display the password reset view.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @param  \Illuminate\Http\Request  $request[m
[32m+[m[32m     * @return \Inertia\Response[m
[32m+[m[32m     */[m
[32m+[m[32m    public function create(Request $request)[m
[32m+[m[32m    {[m
[32m+[m[32m        return Inertia::render('Auth/ResetPassword', [[m
[32m+[m[32m            'email' => $request->email,[m
[32m+[m[32m            'token' => $request->route('token'),[m
[32m+[m[32m        ]);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Handle an incoming new password request.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @param  \Illuminate\Http\Request  $request[m
[32m+[m[32m     * @return \Illuminate\Http\RedirectResponse[m
[32m+[m[32m     *[m
[32m+[m[32m     * @throws \Illuminate\Validation\ValidationException[m
[32m+[m[32m     */[m
[32m+[m[32m    public function store(Request $request)[m
[32m+[m[32m    {[m
[32m+[m[32m        $request->validate([[m
[32m+[m[32m            'token' => 'required',[m
[32m+[m[32m            'email' => 'required|email',[m
[32m+[m[32m            'password' => ['required', 'confirmed', Rules\Password::defaults()],[m
[32m+[m[32m        ]);[m
[32m+[m
[32m+[m[32m        // Here we will attempt to reset the user's password. If it is successful we[m
[32m+[m[32m        // will update the password on an actual user model and persist it to the[m
[32m+[m[32m        // database. Otherwise we will parse the error and return the response.[m
[32m+[m[32m        $status = Password::reset([m
[32m+[m[32m            $request->only('email', 'password', 'password_confirmation', 'token'),[m
[32m+[m[32m            function ($user) use ($request) {[m
[32m+[m[32m                $user->forceFill([[m
[32m+[m[32m                    'password' => Hash::make($request->password),[m
[32m+[m[32m                    'remember_token' => Str::random(60),[m
[32m+[m[32m                ])->save();[m
[32m+[m
[32m+[m[32m                event(new PasswordReset($user));[m
[32m+[m[32m            }[m
[32m+[m[32m        );[m
[32m+[m
[32m+[m[32m        // If the password was successfully reset, we will redirect the user back to[m
[32m+[m[32m        // the application's home authenticated view. If there is an error we can[m
[32m+[m[32m        // redirect them back to where they came from with their error message.[m
[32m+[m[32m        if ($status == Password::PASSWORD_RESET) {[m
[32m+[m[32m            return redirect()->route('login')->with('status', __($status));[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        throw ValidationException::withMessages([[m
[32m+[m[32m            'email' => [trans($status)],[m
[32m+[m[32m        ]);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Controllers/Auth/PasswordResetLinkController.php b/app/Http/Controllers/Auth/PasswordResetLinkController.php[m
[1mnew file mode 100644[m
[1mindex 0000000..84db1a7[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Controllers/Auth/PasswordResetLinkController.php[m
[36m@@ -0,0 +1,54 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Controllers\Auth;[m
[32m+[m
[32m+[m[32muse App\Http\Controllers\Controller;[m
[32m+[m[32muse Illuminate\Http\Request;[m
[32m+[m[32muse Illuminate\Support\Facades\Password;[m
[32m+[m[32muse Illuminate\Validation\ValidationException;[m
[32m+[m[32muse Inertia\Inertia;[m
[32m+[m
[32m+[m[32mclass PasswordResetLinkController extends Controller[m
[32m+[m[32m{[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Display the password reset link request view.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @return \Inertia\Response[m
[32m+[m[32m     */[m
[32m+[m[32m    public function create()[m
[32m+[m[32m    {[m
[32m+[m[32m        return Inertia::render('Auth/ForgotPassword', [[m
[32m+[m[32m            'status' => session('status'),[m
[32m+[m[32m        ]);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Handle an incoming password reset link request.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @param  \Illuminate\Http\Request  $request[m
[32m+[m[32m     * @return \Illuminate\Http\RedirectResponse[m
[32m+[m[32m     *[m
[32m+[m[32m     * @throws \Illuminate\Validation\ValidationException[m
[32m+[m[32m     */[m
[32m+[m[32m    public function store(Request $request)[m
[32m+[m[32m    {[m
[32m+[m[32m        $request->validate([[m
[32m+[m[32m            'email' => 'required|email',[m
[32m+[m[32m        ]);[m
[32m+[m
[32m+[m[32m        // We will send the password reset link to this user. Once we have attempted[m
[32m+[m[32m        // to send the link, we will examine the response then see the message we[m
[32m+[m[32m        // need to show to the user. Finally, we'll send out a proper response.[m
[32m+[m[32m        $status = Password::sendResetLink([m
[32m+[m[32m            $request->only('email')[m
[32m+[m[32m        );[m
[32m+[m
[32m+[m[32m        if ($status == Password::RESET_LINK_SENT) {[m
[32m+[m[32m            return back()->with('status', __($status));[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        throw ValidationException::withMessages([[m
[32m+[m[32m            'email' => [trans($status)],[m
[32m+[m[32m        ]);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Controllers/Auth/RegisteredUserController.php b/app/Http/Controllers/Auth/RegisteredUserController.php[m
[1mnew file mode 100644[m
[1mindex 0000000..23d2b79[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Controllers/Auth/RegisteredUserController.php[m
[36m@@ -0,0 +1,62 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Controllers\Auth;[m
[32m+[m
[32m+[m[32muse App\Models\User;[m
[32m+[m[32muse Inertia\Inertia;[m
[32m+[m[32muse Illuminate\Http\Request;[m
[32m+[m[32m// use Illuminate\Validation\Rules;[m
[32m+[m[32muse App\Http\Controllers\Controller;[m
[32m+[m[32muse Illuminate\Support\Facades\Auth;[m
[32m+[m[32muse Illuminate\Support\Facades\Hash;[m
[32m+[m[32muse Illuminate\Auth\Events\Registered;[m
[32m+[m[32muse App\Providers\RouteServiceProvider;[m
[32m+[m[32muse Illuminate\Validation\Rules\Password;[m
[32m+[m
[32m+[m[32mclass RegisteredUserController extends Controller[m
[32m+[m[32m{[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Display the registration view.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @return \Inertia\Response[m
[32m+[m[32m     */[m
[32m+[m[32m    public function create()[m
[32m+[m[32m    {[m
[32m+[m[32m        return Inertia::render('Auth/Register');[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Handle an incoming registration request.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @param  \Illuminate\Http\Request  $request[m
[32m+[m[32m     * @return \Illuminate\Http\RedirectResponse[m
[32m+[m[32m     *[m
[32m+[m[32m     * @throws \Illuminate\Validation\ValidationException[m
[32m+[m[32m     */[m
[32m+[m[32m    public function store(Request $request)[m
[32m+[m[32m    {[m
[32m+[m[32m        $request->validate([[m
[32m+[m[32m            'name' => 'required|string|max:255',[m
[32m+[m[32m            'email' => 'required|string|email|max:255|unique:users',[m
[32m+[m[32m            'password' => ['required', 'confirmed', Password::min(8)[m
[32m+[m[32m            ->letters()[m
[32m+[m[32m            ->mixedCase()[m
[32m+[m[32m            ->numbers()[m
[32m+[m[32m            ->symbols()[m
[32m+[m[32m            ->uncompromised(5)],[m
[32m+[m[32m        ]);[m
[32m+[m
[32m+[m[32m        $user = User::create([[m
[32m+[m[32m            'name' => $request->name,[m
[32m+[m[32m            'email' => $request->email,[m
[32m+[m[32m            'password' => Hash::make($request->password),[m
[32m+[m[32m            'NID' =>"2345676353434"[m
[32m+[m[32m        ]);[m
[32m+[m
[32m+[m[32m        event(new Registered($user));[m
[32m+[m
[32m+[m[32m        Auth::login($user);[m
[32m+[m
[32m+[m[32m        return redirect(RouteServiceProvider::HOME);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Controllers/Auth/VerifyEmailController.php b/app/Http/Controllers/Auth/VerifyEmailController.php[m
[1mnew file mode 100644[m
[1mindex 0000000..6baa9aa[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Controllers/Auth/VerifyEmailController.php[m
[36m@@ -0,0 +1,30 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Controllers\Auth;[m
[32m+[m
[32m+[m[32muse App\Http\Controllers\Controller;[m
[32m+[m[32muse App\Providers\RouteServiceProvider;[m
[32m+[m[32muse Illuminate\Auth\Events\Verified;[m
[32m+[m[32muse Illuminate\Foundation\Auth\EmailVerificationRequest;[m
[32m+[m
[32m+[m[32mclass VerifyEmailController extends Controller[m
[32m+[m[32m{[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Mark the authenticated user's email address as verified.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @param  \Illuminate\Foundation\Auth\EmailVerificationRequest  $request[m
[32m+[m[32m     * @return \Illuminate\Http\RedirectResponse[m
[32m+[m[32m     */[m
[32m+[m[32m    public function __invoke(EmailVerificationRequest $request)[m
[32m+[m[32m    {[m
[32m+[m[32m        if ($request->user()->hasVerifiedEmail()) {[m
[32m+[m[32m            return redirect()->intended(RouteServiceProvider::HOME.'?verified=1');[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        if ($request->user()->markEmailAsVerified()) {[m
[32m+[m[32m            event(new Verified($request->user()));[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        return redirect()->intended(RouteServiceProvider::HOME.'?verified=1');[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Controllers/Controller.php b/app/Http/Controllers/Controller.php[m
[1mnew file mode 100644[m
[1mindex 0000000..a0a2a8a[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Controllers/Controller.php[m
[36m@@ -0,0 +1,13 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Controllers;[m
[32m+[m
[32m+[m[32muse Illuminate\Foundation\Auth\Access\AuthorizesRequests;[m
[32m+[m[32muse Illuminate\Foundation\Bus\DispatchesJobs;[m
[32m+[m[32muse Illuminate\Foundation\Validation\ValidatesRequests;[m
[32m+[m[32muse Illuminate\Routing\Controller as BaseController;[m
[32m+[m
[32m+[m[32mclass Controller extends BaseController[m
[32m+[m[32m{[m
[32m+[m[32m    use AuthorizesRequests, DispatchesJobs, ValidatesRequests;[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Controllers/admin/ReportController.php b/app/Http/Controllers/admin/ReportController.php[m
[1mnew file mode 100644[m
[1mindex 0000000..ef2b6fc[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Controllers/admin/ReportController.php[m
[36m@@ -0,0 +1,76 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Controllers\admin;[m
[32m+[m
[32m+[m[32muse App\Http\Controllers\Controller;[m
[32m+[m[32muse App\Models\Admin\CardTap;[m
[32m+[m[32muse App\Models\Admin\Vistor;[m
[32m+[m[32muse Illuminate\Http\Request;[m
[32m+[m
[32m+[m[32mclass ReportController extends Controller[m
[32m+[m[32m{[m
[32m+[m[32m    public function createDateString($dates)[m
[32m+[m[32m    {[m
[32m+[m[32m        $dates = date('Y-m-d', strtotime($dates));[m
[32m+[m[32m        return $dates;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public function index()[m
[32m+[m[32m    {[m
[32m+[m[32m        // $vistors = Vistor::with('taps')->paginate(3);[m
[32m+[m[32m        $vistors = Vistor::with('taps')->get();[m
[32m+[m[32m        // dd($vistors[0]->taps);[m
[32m+[m
[32m+[m[32m        $ArrSorted = [];[m
[32m+[m
[32m+[m[32m        foreach ($vistors as $Cvistitor) {[m
[32m+[m
[32m+[m[32m            $v_id = '';[m
[32m+[m[32m            foreach ($Cvistitor->taps as $CvistitorTap) {[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m                if (isset($ArrSorted[date('Y-m-d', strtotime($CvistitorTap->tapped_at))])) {[m
[32m+[m
[32m+[m[32m                    if (isset($CvistitorTap['dayTap'])) {[m
[32m+[m
[32m+[m[32m                        array_push($CvistitorTap['dayTap'], $CvistitorTap);[m
[32m+[m[32m                    } else {[m
[32m+[m[32m                        $CvistitorTap['dayTap'] = $CvistitorTap;[m
[32m+[m[32m                    }[m
[32m+[m
[32m+[m[32m                    array_push($ArrSorted[date('Y-m-d', strtotime($CvistitorTap->tapped_at))], $Cvistitor);[m
[32m+[m[32m                } else {[m
[32m+[m[32m                    if (isset($CvistitorTap['dayTap'])) {[m
[32m+[m[32m                        array_push($CvistitorTap['dayTap'], $CvistitorTap->tapped_at);[m
[32m+[m[32m                    } else {[m
[32m+[m[32m                        $CvistitorTap['dayTap'] = $CvistitorTap->tapped_at;[m
[32m+[m[32m                    }[m
[32m+[m
[32m+[m
[32m+[m[32m                    $ArrSorted[date('Y-m-d', strtotime($CvistitorTap->tapped_at))] = [$Cvistitor];[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m            // else{[m
[32m+[m[32m            //     $v_id = $Cvistitor->ID_Card;[m
[32m+[m[32m            //     continue;[m
[32m+[m[32m            // }[m
[32m+[m
[32m+[m[32m            // array_push( $ArrSorted, $CvistitorTap);[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m            // echo ($v_id );[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        // dd($ArrSorted);[m
[32m+[m
[32m+[m[32m        // dd(Vistor::distinct()->get(['ID_Card']));[m
[32m+[m[32m        dd(Vistor::with('taps')->where('ID_Card','1197880049446058')->get());[m
[32m+[m[32m        dd(count(Vistor::where('status','IN')->get()) , count(Vistor::where('status','OUT')->get()));[m
[32m+[m[41m        [m
[32m+[m
[32m+[m[32m        return view('report', ['vistors' => $ArrSorted]);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Kernel.php b/app/Http/Kernel.php[m
[1mnew file mode 100644[m
[1mindex 0000000..fc6235c[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Kernel.php[m
[36m@@ -0,0 +1,68 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http;[m
[32m+[m
[32m+[m[32muse Illuminate\Foundation\Http\Kernel as HttpKernel;[m
[32m+[m
[32m+[m[32mclass Kernel extends HttpKernel[m
[32m+[m[32m{[m
[32m+[m[32m    /**[m
[32m+[m[32m     * The application's global HTTP middleware stack.[m
[32m+[m[32m     *[m
[32m+[m[32m     * These middleware are run during every request to your application.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @var array<int, class-string|string>[m
[32m+[m[32m     */[m
[32m+[m[32m    protected $middleware = [[m
[32m+[m[32m        // \App\Http\Middleware\TrustHosts::class,[m
[32m+[m[32m        \App\Http\Middleware\TrustProxies::class,[m
[32m+[m[32m        \Fruitcake\Cors\HandleCors::class,[m
[32m+[m[32m        \App\Http\Middleware\PreventRequestsDuringMaintenance::class,[m
[32m+[m[32m        \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,[m
[32m+[m[32m        \App\Http\Middleware\TrimStrings::class,[m
[32m+[m[32m        \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,[m
[32m+[m[32m    ];[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * The application's route middleware groups.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @var array<string, array<int, class-string|string>>[m
[32m+[m[32m     */[m
[32m+[m[32m    protected $middlewareGroups = [[m
[32m+[m[32m        'web' => [[m
[32m+[m[32m            \App\Http\Middleware\EncryptCookies::class,[m
[32m+[m[32m            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,[m
[32m+[m[32m            \Illuminate\Session\Middleware\StartSession::class,[m
[32m+[m[32m            // \Illuminate\Session\Middleware\AuthenticateSession::class,[m
[32m+[m[32m            \Illuminate\View\Middleware\ShareErrorsFromSession::class,[m
[32m+[m[32m            \App\Http\Middleware\VerifyCsrfToken::class,[m
[32m+[m[32m            \Illuminate\Routing\Middleware\SubstituteBindings::class,[m
[32m+[m[32m            \App\Http\Middleware\HandleInertiaRequests::class,[m
[32m+[m[32m        ],[m
[32m+[m
[32m+[m[32m        'api' => [[m
[32m+[m[32m            // \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,[m
[32m+[m[32m            'throttle:api',[m
[32m+[m[32m            \Illuminate\Routing\Middleware\SubstituteBindings::class,[m
[32m+[m[32m        ],[m
[32m+[m[32m    ];[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * The application's route middleware.[m
[32m+[m[32m     *[m
[32m+[m[32m     * These middleware may be assigned to groups or used individually.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @var array<string, class-string|string>[m
[32m+[m[32m     */[m
[32m+[m[32m    protected $routeMiddleware = [[m
[32m+[m[32m        'auth' => \App\Http\Middleware\Authenticate::class,[m
[32m+[m[32m        'auth.basic' => \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,[m
[32m+[m[32m        'cache.headers' => \Illuminate\Http\Middleware\SetCacheHeaders::class,[m
[32m+[m[32m        'can' => \Illuminate\Auth\Middleware\Authorize::class,[m
[32m+[m[32m        'guest' => \App\Http\Middleware\RedirectIfAuthenticated::class,[m
[32m+[m[32m        'password.confirm' => \Illuminate\Auth\Middleware\RequirePassword::class,[m
[32m+[m[32m        'signed' => \Illuminate\Routing\Middleware\ValidateSignature::class,[m
[32m+[m[32m        'throttle' => \Illuminate\Routing\Middleware\ThrottleRequests::class,[m
[32m+[m[32m        'verified' => \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,[m
[32m+[m[32m    ];[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Middleware/Authenticate.php b/app/Http/Middleware/Authenticate.php[m
[1mnew file mode 100644[m
[1mindex 0000000..704089a[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Middleware/Authenticate.php[m
[36m@@ -0,0 +1,21 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Middleware;[m
[32m+[m
[32m+[m[32muse Illuminate\Auth\Middleware\Authenticate as Middleware;[m
[32m+[m
[32m+[m[32mclass Authenticate extends Middleware[m
[32m+[m[32m{[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Get the path the user should be redirected to when they are not authenticated.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @param  \Illuminate\Http\Request  $request[m
[32m+[m[32m     * @return string|null[m
[32m+[m[32m     */[m
[32m+[m[32m    protected function redirectTo($request)[m
[32m+[m[32m    {[m
[32m+[m[32m        if (! $request->expectsJson()) {[m
[32m+[m[32m            return route('login');[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Middleware/EncryptCookies.php b/app/Http/Middleware/EncryptCookies.php[m
[1mnew file mode 100644[m
[1mindex 0000000..867695b[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Middleware/EncryptCookies.php[m
[36m@@ -0,0 +1,17 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Middleware;[m
[32m+[m
[32m+[m[32muse Illuminate\Cookie\Middleware\EncryptCookies as Middleware;[m
[32m+[m
[32m+[m[32mclass EncryptCookies extends Middleware[m
[32m+[m[32m{[m
[32m+[m[32m    /**[m
[32m+[m[32m     * The names of the cookies that should not be encrypted.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @var array<int, string>[m
[32m+[m[32m     */[m
[32m+[m[32m    protected $except = [[m
[32m+[m[32m        //[m
[32m+[m[32m    ];[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Middleware/HandleInertiaRequests.php b/app/Http/Middleware/HandleInertiaRequests.php[m
[1mnew file mode 100644[m
[1mindex 0000000..11aa98a[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Middleware/HandleInertiaRequests.php[m
[36m@@ -0,0 +1,48 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Middleware;[m
[32m+[m
[32m+[m[32muse Illuminate\Http\Request;[m
[32m+[m[32muse Inertia\Middleware;[m
[32m+[m
[32m+[m[32mclass HandleInertiaRequests extends Middleware[m
[32m+[m[32m{[m
[32m+[m[32m    /**[m
[32m+[m[32m     * The root template that is loaded on the first page visit.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @var string[m
[32m+[m[32m     */[m
[32m+[m[32m    protected $rootView = 'app';[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Determine the current asset version.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @param  \Illuminate\Http\Request  $request[m
[32m+[m[32m     * @return string|null[m
[32m+[m[32m     */[m
[32m+[m[32m    public function version(Request $request)[m
[32m+[m[32m    {[m
[32m+[m[32m        return parent::version($request);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Define the props that are shared by default.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @param  \Illuminate\Http\Request  $request[m
[32m+[m[32m     * @return array[m
[32m+[m[32m     */[m
[32m+[m[32m    public function share(Request $request)[m
[32m+[m[32m    {[m
[32m+[m[32m        return array_merge(parent::share($request), [[m
[32m+[m[32m            'auth' => [[m
[32m+[m[32m                'user' => $request->user(),[m
[32m+[m[32m            ],[m
[32m+[m[32m            'flash' => function () use ($request) {[m
[32m+[m[32m                return [[m
[32m+[m[32m                    'success' => $request->session()->get('success'),[m
[32m+[m[32m                    'error' => $request->session()->get('error'),[m
[32m+[m[32m                ];[m
[32m+[m[32m            },[m
[32m+[m[32m        ]);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Middleware/PreventRequestsDuringMaintenance.php b/app/Http/Middleware/PreventRequestsDuringMaintenance.php[m
[1mnew file mode 100644[m
[1mindex 0000000..74cbd9a[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Middleware/PreventRequestsDuringMaintenance.php[m
[36m@@ -0,0 +1,17 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Middleware;[m
[32m+[m
[32m+[m[32muse Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance as Middleware;[m
[32m+[m
[32m+[m[32mclass PreventRequestsDuringMaintenance extends Middleware[m
[32m+[m[32m{[m
[32m+[m[32m    /**[m
[32m+[m[32m     * The URIs that should be reachable while maintenance mode is enabled.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @var array<int, string>[m
[32m+[m[32m     */[m
[32m+[m[32m    protected $except = [[m
[32m+[m[32m        //[m
[32m+[m[32m    ];[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Middleware/RedirectIfAuthenticated.php b/app/Http/Middleware/RedirectIfAuthenticated.php[m
[1mnew file mode 100644[m
[1mindex 0000000..a2813a0[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Middleware/RedirectIfAuthenticated.php[m
[36m@@ -0,0 +1,32 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Middleware;[m
[32m+[m
[32m+[m[32muse App\Providers\RouteServiceProvider;[m
[32m+[m[32muse Closure;[m
[32m+[m[32muse Illuminate\Http\Request;[m
[32m+[m[32muse Illuminate\Support\Facades\Auth;[m
[32m+[m
[32m+[m[32mclass RedirectIfAuthenticated[m
[32m+[m[32m{[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Handle an incoming request.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @param  \Illuminate\Http\Request  $request[m
[32m+[m[32m     * @param  \Closure(\Illuminate\Http\Request): (\Illuminate\Http\Response|\Illuminate\Http\RedirectResponse)  $next[m
[32m+[m[32m     * @param  string|null  ...$guards[m
[32m+[m[32m     * @return \Illuminate\Http\Response|\Illuminate\Http\RedirectResponse[m
[32m+[m[32m     */[m
[32m+[m[32m    public function handle(Request $request, Closure $next, ...$guards)[m
[32m+[m[32m    {[m
[32m+[m[32m        $guards = empty($guards) ? [null] : $guards;[m
[32m+[m
[32m+[m[32m        foreach ($guards as $guard) {[m
[32m+[m[32m            if (Auth::guard($guard)->check()) {[m
[32m+[m[32m                return redirect(RouteServiceProvider::HOME);[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        return $next($request);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Middleware/TrimStrings.php b/app/Http/Middleware/TrimStrings.php[m
[1mnew file mode 100644[m
[1mindex 0000000..88cadca[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Middleware/TrimStrings.php[m
[36m@@ -0,0 +1,19 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Middleware;[m
[32m+[m
[32m+[m[32muse Illuminate\Foundation\Http\Middleware\TrimStrings as Middleware;[m
[32m+[m
[32m+[m[32mclass TrimStrings extends Middleware[m
[32m+[m[32m{[m
[32m+[m[32m    /**[m
[32m+[m[32m     * The names of the attributes that should not be trimmed.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @var array<int, string>[m
[32m+[m[32m     */[m
[32m+[m[32m    protected $except = [[m
[32m+[m[32m        'current_password',[m
[32m+[m[32m        'password',[m
[32m+[m[32m        'password_confirmation',[m
[32m+[m[32m    ];[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Middleware/TrustHosts.php b/app/Http/Middleware/TrustHosts.php[m
[1mnew file mode 100644[m
[1mindex 0000000..7186414[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Middleware/TrustHosts.php[m
[36m@@ -0,0 +1,20 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Middleware;[m
[32m+[m
[32m+[m[32muse Illuminate\Http\Middleware\TrustHosts as Middleware;[m
[32m+[m
[32m+[m[32mclass TrustHosts extends Middleware[m
[32m+[m[32m{[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Get the host patterns that should be trusted.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @return array<int, string|null>[m
[32m+[m[32m     */[m
[32m+[m[32m    public function hosts()[m
[32m+[m[32m    {[m
[32m+[m[32m        return [[m
[32m+[m[32m            $this->allSubdomainsOfApplicationUrl(),[m
[32m+[m[32m        ];[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Middleware/TrustProxies.php b/app/Http/Middleware/TrustProxies.php[m
[1mnew file mode 100644[m
[1mindex 0000000..3391630[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Middleware/TrustProxies.php[m
[36m@@ -0,0 +1,28 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Middleware;[m
[32m+[m
[32m+[m[32muse Illuminate\Http\Middleware\TrustProxies as Middleware;[m
[32m+[m[32muse Illuminate\Http\Request;[m
[32m+[m
[32m+[m[32mclass TrustProxies extends Middleware[m
[32m+[m[32m{[m
[32m+[m[32m    /**[m
[32m+[m[32m     * The trusted proxies for this application.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @var array<int, string>|string|null[m
[32m+[m[32m     */[m
[32m+[m[32m    protected $proxies;[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * The headers that should be used to detect proxies.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @var int[m
[32m+[m[32m     */[m
[32m+[m[32m    protected $headers =[m
[32m+[m[32m        Request::HEADER_X_FORWARDED_FOR |[m
[32m+[m[32m        Request::HEADER_X_FORWARDED_HOST |[m
[32m+[m[32m        Request::HEADER_X_FORWARDED_PORT |[m
[32m+[m[32m        Request::HEADER_X_FORWARDED_PROTO |[m
[32m+[m[32m        Request::HEADER_X_FORWARDED_AWS_ELB;[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Middleware/VerifyCsrfToken.php b/app/Http/Middleware/VerifyCsrfToken.php[m
[1mnew file mode 100644[m
[1mindex 0000000..9e86521[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Middleware/VerifyCsrfToken.php[m
[36m@@ -0,0 +1,17 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Middleware;[m
[32m+[m
[32m+[m[32muse Illuminate\Foundation\Http\Middleware\VerifyCsrfToken as Middleware;[m
[32m+[m
[32m+[m[32mclass VerifyCsrfToken extends Middleware[m
[32m+[m[32m{[m
[32m+[m[32m    /**[m
[32m+[m[32m     * The URIs that should be excluded from CSRF verification.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @var array<int, string>[m
[32m+[m[32m     */[m
[32m+[m[32m    protected $except = [[m
[32m+[m[32m        //[m
[32m+[m[32m    ];[m
[32m+[m[32m}[m
[1mdiff --git a/app/Http/Requests/Auth/LoginRequest.php b/app/Http/Requests/Auth/LoginRequest.php[m
[1mnew file mode 100644[m
[1mindex 0000000..940a2d4[m
[1m--- /dev/null[m
[1m+++ b/app/Http/Requests/Auth/LoginRequest.php[m
[36m@@ -0,0 +1,93 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace App\Http\Requests\Auth;[m
[32m+[m
[32m+[m[32muse Illuminate\Auth\Events\Lockout;[m
[32m+[m[32muse Illuminate\Foundation\Http\FormRequest;[m
[32m+[m[32muse Illuminate\Support\Facades\Auth;[m
[32m+[m[32muse Illuminate\Support\Facades\RateLimiter;[m
[32m+[m[32muse Illuminate\Support\Str;[m
[32m+[m[32muse Illuminate\Validation\ValidationException;[m
[32m+[m
[32m+[m[32mclass LoginRequest extends FormRequest[m
[32m+[m[32m{[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Determine if the user is authorized to make this request.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @return bool[m
[32m+[m[32m     */[m
[32m+[m[32m    public function authorize()[m
[32m+[m[32m    {[m
[32m+[m[32m        return true;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Get the validation rules that apply to the request.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @return array[m
[32m+[m[32m     */[m
[32m+[m[32m    public function rules()[m
[32m+[m[32m    {[m
[32m+[m[32m        return [[m